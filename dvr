# distance_vector.py

# Number of routers
n = 4

# Router names
routers = ['A', 'B', 'C', 'D']

# Initial cost matrix (inf = 9999)
inf = 9999
cost_matrix = [
    [0,   1,   3, inf],   # A
    [1,   0,   1,   4],   # B
    [3,   1,   0,   2],   # C
    [inf, 4,   2,   0]    # D
]

# Initialize routing tables
routing_tables = [[[cost_matrix[i][j], j] for j in range(n)] for i in range(n)]

# Distance Vector Algorithm
def distance_vector():
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if routing_tables[i][j][0] > cost_matrix[i][k] + routing_tables[k][j][0]:
                    routing_tables[i][j][0] = cost_matrix[i][k] + routing_tables[k][j][0]
                    routing_tables[i][j][1] = k

# Run the algorithm
distance_vector()

# Print results
for i in range(n):
    print(f"\nRouting Table for Router {routers[i]}:")
    print("Destination\tCost\tNext Hop")
    for j in range(n):
        if i != j:
            next_hop = routers[routing_tables[i][j][1]]
            print(f"{routers[j]}\t\t{routing_tables[i][j][0]}\t{next_hop}")
